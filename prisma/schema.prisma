// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Zmieniamy na sqlite
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groupsOwned    Group[]   @relation("GroupOwner")
  groupsMemberOf MembersOnGroups[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  artist      String
  date        DateTime
  location    String
  description String?
    groups Group[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation("GroupOwner", fields: [ownerId], references: [id])

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  members MembersOnGroups[]
}

model MembersOnGroups {
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  group   Group   @relation(fields: [groupId], references: [id])
  groupId String
  
  assignedAt DateTime @default(now())
  
  @@id([userId, groupId])
}